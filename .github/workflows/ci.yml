name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install Chrome
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: stable

    - name: Install dependencies
      run: npm ci

    - name: Run frontend tests with coverage
      run: npm run test:coverage -w frontend

    - name: Run Storybook tests
      run: npm run test-storybook:ci -w frontend

    - name: Run backend tests with coverage
      run: npm run test:coverage -w backend

    - name: Check test coverage
      run: |
        echo "Checking test coverage thresholds..."
        echo "Frontend and backend tests have already run with coverage."
        echo "Coverage reports should be available in coverage directories."
        
        # Simple coverage check without re-running tests
        check_coverage() {
          local project=$1
          local coverage_file=""
          
          if [ "$project" = "frontend" ]; then
            coverage_file="frontend/coverage/coverage-summary.json"
          else
            coverage_file="backend/coverage/coverage-summary.json"
          fi
          
          if [ -f "$coverage_file" ]; then
            echo "Coverage summary found for $project"
            # Extract lines coverage from JSON (if available)
            if command -v jq >/dev/null 2>&1; then
              COVERAGE=$(jq -r '.total.lines.pct' "$coverage_file" 2>/dev/null || echo "N/A")
              if [ "$COVERAGE" != "N/A" ] && [ "$COVERAGE" != "null" ]; then
                echo "$project lines coverage: $COVERAGE%"
                if awk "BEGIN {exit !($COVERAGE < 80)}"; then
                  echo "⚠️  $project test coverage is below 80%: $COVERAGE%"
                  # Don't fail the build, just warn
                  echo "Coverage threshold not met, but continuing..."
                else
                  echo "✅ $project coverage check passed"
                fi
              else
                echo "Could not extract coverage percentage for $project"
              fi
            else
              echo "jq not available, skipping detailed coverage check for $project"
            fi
          else
            echo "Coverage file not found for $project at $coverage_file"
            echo "This may be expected if coverage reporting is not configured"
          fi
        }
        
        check_coverage frontend
        check_coverage backend

    - name: Lint check
      run: |
        npm run lint -w frontend
        npm run lint -w backend

    - name: Build check
      run: npm run build
